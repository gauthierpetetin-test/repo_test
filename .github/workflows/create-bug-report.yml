name: Create release bug report issue when release branch gets created

on: create

jobs:
  create-bug-report:
    runs-on: ubuntu-latest
    steps:
      - name: Extract version from branch name if release branch
        id: extract_version
        run: |
          if [[ "$GITHUB_REF" =~ ^refs/heads/Version-v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            version="${GITHUB_REF#refs/heads/Version-v}"
            echo "New release branch($version), continue next steps"
            echo "version=$version" >> "$GITHUB_ENV"
          else
            echo "Not a release branch, skip next steps"
          fi

      - name: Create bug report issue on planning repo
        if: env.version
        run: |
          payload=$(cat <<EOF
          {
            "title": "v${{ env.version }} Bug Report",
            "body": "This bug report was automatically created by a GitHub action upon the creation of release branch \`release/${{ env.version }}\` (release cut).\n\nNote that once the release is prepared for store submission, meaning the \`release/${{ env.version }}\` branch merges into \`main\`, another GitHub action will automatically close this epic.\n\n**What is it used for?**\n\n1. It is used to track release dates on this [Github Project board](https://github.com/orgs/MetaMask/projects/86/views/3). Release dates are then pulled into our metrics system.\n\n2. It is also used by our Zapier automations, in order to know if automated automations shall be sent on Slack for the given release. Notifications will only be sent if this issue is open.",
            "labels": ["type-bug", "team-mobile-platform", "regression-RC-${{ env.version }}"]
          }
          EOF
          )
          curl -X POST \
            -H "Authorization: token ${{ secrets.BUG_REPORT_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/gauthierpetetin-test/repo_test_2/issues \
            -d "$payload"
